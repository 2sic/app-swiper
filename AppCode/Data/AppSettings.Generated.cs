// DO NOT MODIFY THIS FILE - IT IS AUTO-GENERATED
// See also: https://go.2sxc.org/copilot-data
// To extend it, create a "AppSettings.cs" with this contents:
/*
namespace AppCode.Data
{
  public partial class AppSettings
  {
    // Add your own properties and methods here
  }
}
*/

// Generator:   CSharpDataModelsGenerator v17.06.02
// App/Edition: Swiper Slider/
// User:        2sic Web-Developer
// When:        2024-04-05 11:31:21Z
namespace AppCode.Data
{
  // This is a generated class for AppSettings (scope: System.App)
  // To extend/modify it, see instructions above.

  /// <summary>
  /// AppSettings data. <br/>
  /// Generated 2024-04-05 11:31:21Z. Re-generate whenever you change the ContentType. <br/>
  /// <br/>
  /// Default properties such as `.Title` or `.Id` are provided in the base class. <br/>
  /// Most properties have a simple access, such as `.AnimationDuration`. <br/>
  /// For other properties or uses, use methods such as
  /// .IsNotEmpty("FieldName"), .String("FieldName"), .Children(...), .Picture(...), .Html(...).
  /// </summary>
  /// <remarks>
  /// This Content-Type is NOT in the default scope, so you may not see it in the Admin UI. It's in the scope System.App.
  /// </remarks>
  public partial class AppSettings: AutoGenerated.ZagAppSettings
  {  }
}

namespace AppCode.Data.AutoGenerated
{
  /// <summary>
  /// Auto-Generated base class for System.App.AppSettings in separate namespace and special name to avoid accidental use.
  /// </summary>
  public abstract class ZagAppSettings: Custom.Data.CustomItem
  {
    /// <summary>
    /// AnimationDuration as int. <br/>
    /// To get other types use methods such as .Decimal("AnimationDuration")
    /// </summary>
    public int AnimationDuration => _item.Int("AnimationDuration");

    /// <summary>
    /// Autoplay as bool. <br/>
    /// To get nullable use .Get("Autoplay") as bool?;
    /// </summary>
    public bool Autoplay => _item.Bool("Autoplay");

    /// <summary>
    /// DarkContent as bool. <br/>
    /// To get nullable use .Get("DarkContent") as bool?;
    /// </summary>
    public bool DarkContent => _item.Bool("DarkContent");

    /// <summary>
    /// EffectFallback as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("EffectFallback", scrubHtml: true) etc.
    /// </summary>
    public string EffectFallback => _item.String("EffectFallback", fallback: "");

    /// <summary>
    /// Height as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Height", scrubHtml: true) etc.
    /// </summary>
    public string Height => _item.String("Height", fallback: "");

    /// <summary>
    /// OverlayEffect as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("OverlayEffect", scrubHtml: true) etc.
    /// </summary>
    public string OverlayEffect => _item.String("OverlayEffect", fallback: "");

    /// <summary>
    /// ShowDuration as int. <br/>
    /// To get other types use methods such as .Decimal("ShowDuration")
    /// </summary>
    public int ShowDuration => _item.Int("ShowDuration");

    /// <summary>
    /// ShowPaginationArrows as bool. <br/>
    /// To get nullable use .Get("ShowPaginationArrows") as bool?;
    /// </summary>
    public bool ShowPaginationArrows => _item.Bool("ShowPaginationArrows");

    /// <summary>
    /// ShowPaginationDots as bool. <br/>
    /// To get nullable use .Get("ShowPaginationDots") as bool?;
    /// </summary>
    public bool ShowPaginationDots => _item.Bool("ShowPaginationDots");

    /// <summary>
    /// TextPosition as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("TextPosition", scrubHtml: true) etc.
    /// </summary>
    public string TextPosition => _item.String("TextPosition", fallback: "");

    /// <summary>
    /// Width as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Width", scrubHtml: true) etc.
    /// </summary>
    public string Width => _item.String("Width", fallback: "");
  }
}