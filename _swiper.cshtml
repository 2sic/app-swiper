@inherits ToSic.Sxc.Dnn.RazorComponent
@using ToSic.Razor.Blade;

<link rel="stylesheet" href="@App.Path/node_modules/swiper/css/swiper.min.css">
<link rel="stylesheet" href="@App.Path/dist/styles.min.css">

<div @Edit.TagToolbar(Content, toolbar: new [] { "settings&hover=left&color=dimgray&autoAddMore=start" })>

  @* Slider main container *@
  @{
    var sliderStyleWidth = Text.Has(Content.Width) ? Content.Width : App.Settings.Width;
    var sliderStyleHeight = Text.Has(Content.Height) ? Content.Height : App.Settings.Height;
  }
  <div class="swiper-container swiper-@Dnn.Module.ModuleID" style="width: @sliderStyleWidth; height: @sliderStyleHeight">
    @* Additional required wrapper *@
    <div class="swiper-wrapper" data-swiper-autoplay="@Content.AutoplayDelay">
      @* Slides *@
      @foreach (var slide in Content.Slides)
      {
        <div class="swiper-slide" @Edit.TagToolbar(slide, toolbar: new[] { "%layout&show=false", "%delete&show=true" } )>
          <div class="image-wrapper" style='background-image: url(@Tags.SafeUrl(slide.Image + "?w=1600&q=80"))'>
            <div class="container-fluid h-100">
              <div class="row h-100 justify-content-center align-items-center">
                <div class="col-12 col-md-6 text-center">
                @if(!String.IsNullOrEmpty(slide.Title)){
                  <p class="lead">
                    @slide.Title
                  </p>
                }
                @if(!String.IsNullOrEmpty(slide.Text)){
                  <div class="co-slidertext">
                    @Html.Raw(slide.Text)
                  </div>
                }
                @if(!String.IsNullOrEmpty(slide.LinkText)){
                  <a class="btn btn-primary" href="@Tags.SafeUrl(slide.Link)" target="@(slide.LinkBlankTarget == true ? "_blank" : "_self")">@slide.LinkBlankTarget @slide.LinkText</a>
                }
                </div>
              </div>
            </div>
          </div>
        </div>
      }
    </div>

    @* If we need pagination *@
    @if(!Content.Pagination) { } else if(Content.Pagination || App.Settings.Pagination) {
      <div class="swiper-pagination"></div>
    }

    @* If we need navigation buttons *@
    @if(Content.Navigation) {
      <div class="swiper-button-prev"></div>
      <div class="swiper-button-next"></div>
    } else {
      if(App.Settings.Navigation) {
        <div class="swiper-button-prev"></div>
        <div class="swiper-button-next"></div>
      }
    }
  </div>
</div>

<script src="@App.Path/node_modules/swiper/js/swiper.min.js"></script>

<script>
  var configured = {
    // Optional parameters
    loop: true,
    autoplay: ('@Content.Autoplay' === 'True'),

    speed: @(Text.Has(Content.Speed) ? Content.Speed : App.Settings.Speed),

    // If we need pagination
    pagination: {
      el: '.swiper-pagination',
    },

    // Navigation arrows
    navigation: {
      nextEl: '.swiper-button-next',
      prevEl: '.swiper-button-prev',
    },
  };
  var effectDefaults = @Html.Raw(Content.Effect.Configuration);
  var fallback = @Html.Raw(App.Settings.EffectFallback);
  var merged = Object.assign(fallback, effectDefaults, configured);
  var mySwiper = new Swiper ('.swiper-@Dnn.Module.ModuleID', merged);
</script>

